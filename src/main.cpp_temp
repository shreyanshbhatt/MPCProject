#include <math.h>
#include <uWS/uWS.h>
#include <chrono>
#include <iostream>
#include <thread>
#include <vector>
#include "Eigen-3.3/Eigen/Core"
#include "Eigen-3.3/Eigen/QR"
#include "MPC.h"
#include "json.hpp"

// For converting back and forth between radians and degrees.
constexpr double pi() { return M_PI; }
double deg2rad(double x) { return x * pi() / 180; }
double rad2deg(double x) { return x * 180 / pi(); }


// Evaluate a polynomial.
double polyeval(Eigen::VectorXd coeffs, double x) {
  double result = 0.0;
  for (int i = 0; i < coeffs.size(); i++) {
    result += coeffs[i] * pow(x, i);
  }
  return result;
}

// Fit a polynomial.
// Adapted from
// https://github.com/JuliaMath/Polynomials.jl/blob/master/src/Polynomials.jl#L676-L716
Eigen::VectorXd polyfit(Eigen::VectorXd xvals, Eigen::VectorXd yvals,
    int order) {
  assert(xvals.size() == yvals.size());
  assert(order >= 1 && order <= xvals.size() - 1);
  Eigen::MatrixXd A(xvals.size(), order + 1);

  for (int i = 0; i < xvals.size(); i++) {
    A(i, 0) = 1.0;
  }

  for (int j = 0; j < xvals.size(); j++) {
    for (int i = 0; i < order; i++) {
      A(j, i + 1) = A(j, i) * xvals(j);
    }
  }

  auto Q = A.householderQr();
  auto result = Q.solve(yvals);
  return result;
}

int main() {
  // MPC is initialized here!
  MPC mpc;

  double px = 179.3;
  double py = 98.6;
  double psi = 0.0;
  double v = 10;
  Eigen::VectorXd eptsx(2);
  Eigen::VectorXd eptsy(2);
  eptsx << 179.3, 172.3;
  eptsy << 98.67, 117.18;
  /*
   * TODO: Calculate steering angle and throttle using MPC.
   *
   * Both are in between [-1, 1].
   *
   */
  auto coeffs = polyfit(eptsx, eptsy, 1);
  double cte = polyeval(coeffs, px) - py;
  double epsi = psi - atan(coeffs[1]);
  Eigen::VectorXd state(6);
  state << px, py, psi, v, cte, epsi;

  auto vars = mpc.Solve(state, coeffs);
  double steer_value = vars[6] * -1;
  double throttle_value = vars[7];

  std::cout << steer_value << ", " << throttle_value << std::endl;
  vector<double> mpc_x_vals;
  vector<double> mpc_y_vals;

  vector<double> next_x_vals;
  vector<double> next_y_vals;
  for (unsigned int j = 0; j < 10; j++) {
    auto vars = mpc.Solve(state,
        coeffs);
    mpc_x_vals.push_back(vars[0]);
    mpc_y_vals.push_back(vars[1]);
    std::cout << vars[0] << "," << vars[1] << std::endl;
    state << vars[0], vars[1], vars[2], vars[3], vars[4], vars[5];
  }
  return 1;
}  
